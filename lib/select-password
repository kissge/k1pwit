#!/bin/bash

set -Eeuo pipefail

function main() {
    init_session_file

    . "$OP_SESSION_FILE"

    while ! items=$(list_items); do
        op signin >"$OP_SESSION_FILE" || continue
        . "$OP_SESSION_FILE"
    done

    id=$(select_item "$items")
    item=$(get_item "$id")
    select_field "$item"
}

# Initialize the session file if necessary.
function init_session_file() {
    if [ ! -f "$OP_SESSION_FILE" ]; then
        touch "$OP_SESSION_FILE"
        chmod 600 "$OP_SESSION_FILE"
    fi
}

# List all items and print JSON to stdout.
function list_items() {
    echo -n $'Loading items...\r' >&2
    op item list --format json 2>/dev/null
}

# Let the user select an item from the list and print the ID to stdout.
# Items previously selected will be prioritized.
function select_item() {
    ranking=$(jq -Rc '{(.): input_line_number}' "$HISTORY_FILE" 2>/dev/null | jq -s add | jq '. // {}' || true)
    jq -rc 'sort_by($ranking[.id] // infinite)[] |
            .id + "\t" + .title + " (" + .additional_information + ")"' --argjson ranking "$ranking" <<<"$1" |
        fzf --delimiter $'\t' --with-nth 2 |
        cut -d$'\t' -f1 |
        tee -a "$HISTORY_FILE"
}

# Get the item with the given ID and print JSON to stdout.
function get_item() {
    echo 'Getting item...' >&2
    op item get "$1" --format json
}

# Let the user select a password field from the item (if there are more than one) and print the value to stdout.
function select_field() {
    selected=$(jq -rc '[.fields[] | select(.type == "CONCEALED")] |
                           to_entries[] |
                           (.key | tostring) + "\t" + .value.label' <<<"$1" |
        fzf -1 --delimiter $'\t' --with-nth 2 |
        cut -d$'\t' -f1)
    jq -rc '[.fields[] | select(.type == "CONCEALED")] | .[$selected].value' --argjson selected "$selected" <<<"$1"
}

main
